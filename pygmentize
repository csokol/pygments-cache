#!/usr/bin/python

import sys, hashlib, os, shlex, time
from subprocess import Popen, PIPE, STDOUT

def log(string):
    log = open('/tmp/pygmentize-output', 'a')
    log.write(string + "\n")
    log.close

def contains_input_file(args):
    contains =  not args[len(args) - 2].startswith("-")
    return contains

def read_code(args):
    f = open(args[len(args) - 1], 'r')
    code = f.read()
    f.close()
    return code
    
def parse_pygmentizeargs(argv):
    pygmentize_cmd = "pygmentize-orig"
    for c in argv:
        if c == argv[0]:
            continue
        c = c.replace(" ", "")
        pygmentize_cmd += " " + c
    return pygmentize_cmd
    
def sourcecode_md5(sourcecode, pygmentize_cmd):
    md5 = hashlib.md5()
    md5.update(sourcecode + pygmentize_cmd)
    return md5.hexdigest()
    
def find_from_cache(source_md5):
    absolute_path = "/home/csokol/.pygments/cache/" + source_md5
    if (os.path.exists(absolute_path)):
        pygmentized_code_file = open(absolute_path, 'r')
        code = pygmentized_code_file.read()
        pygmentized_code_file.close()
        return code
    else:
        return None
        
def write_to_cache(source_md5, pygmentized_code):
    absolute_path = "/home/csokol/.pygments/cache/" + source_md5
    pygmentized_code_file = open(absolute_path, 'w')
    pygmentized_code_file.write(pygmentized_code)
    pygmentized_code_file.close()

def fork_pygmentize_stdin(pygmentize_cmd):
    p = Popen(pygmentize_cmd, shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE, close_fds=True)
    stdin_input = sys.stdin.read()
    p.stdin.write(stdin_input)
    p.stdin.close()
    return p.stdout.read()

#def fork_pygmentize(pygmentize_cmd):
    #if not contains_input_file(sys.argv):
        #p = Popen(pygmentize_cmd, shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE, close_fds=True)
        #stdin_input = sys.stdin.read()
        #out, err = p.communicate(input=stdin_input)
        #return out
    #else:
        #code_to_pygmentize = read_code(sys.argv)
        #md5 = sourcecode_md5(code_to_pygmentize, pygmentize_cmd)
        #pygmentized_code = find_from_cache(md5)
        #if pygmentized_code != None:
            ##log("lendo do cache")
            #return pygmentized_code
        #else:
            #p = Popen(pygmentize_cmd, shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE, close_fds=True)
            #pygmentized_code = p.stdout.read()
            #p.communicate(input=None)
            #write_to_cache(md5, pygmentized_code)
    #return pygmentized_code
    
 
#md5 = sourcecode_md5("public static void adsasdmain(string[] args) {};", "pygmentize lalaadasl")
#print find_from_cache(md5)

pygmentize_cmd = parse_pygmentizeargs(sys.argv)
try: 
    if not contains_input_file(sys.argv):
        output = fork_pygmentize_stdin(pygmentize_cmd)
        print output
    else:
        p = Popen(pygmentize_cmd, shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE, close_fds=True)
        p.communicate(input=None)
        
except Exception:
    log("deu erro: " + pygmentize_cmd)
#log(pygmentize_cmd)

#log(str(sys.argv))
#log(output)



